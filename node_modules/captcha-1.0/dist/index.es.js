import React, { Component } from 'react';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Captcha = function (_Component) {
  inherits(Captcha, _Component);

  function Captcha(props) {
    classCallCheck(this, Captcha);

    var _this = possibleConstructorReturn(this, (Captcha.__proto__ || Object.getPrototypeOf(Captcha)).call(this, props));

    _this.handleChange = function (e) {
      _this.setState(defineProperty({}, e.target.name, e.target.value));
    };

    _this.CreateCaptcha = function (e) {
      document.getElementById('myCanvas').innerHTML = "";
      var charArray = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@!#$%^&*";
      var captchaLength = 6;
      var captcha = [];
      for (var i = 0; i < captchaLength; i++) {
        //below code will not allow Repetition of Characters
        var index = Math.floor(Math.random() * charArray.length + 1); //get the next character from the array
        if (captcha.indexOf(charArray[index]) == -1) captcha.push(charArray[index]);else i--;
      }
      console.log(captcha);
      var canv = document.createElement("canvas");
      canv.id = "captcha";
      canv.width = 100;
      canv.height = 50;
      var ctx = canv.getContext("2d");
      ctx.font = "25px Broadway";
      //storing captcha so that can validate you can save it somewhere else according to your specific requirements
      // code = captcha.join("");
      _this.setState({
        code: captcha.join("")
      });
      ctx.strokeText(captcha.join(""), 0, 30);
      // alert(this.state.code)
      document.getElementById("myCanvas").appendChild(canv);
    };

    _this.ValidateCaptcha = function (e) {
      debugger;
      if (_this.state.code == _this.state.captcha) {
        _this.props.onPress();
      } else {
        document.getElementById("error").innerHTML = "Please enter valid Captcha";
        document.getElementById("error").style.color = "red";
        _this.CreateCaptcha();
      }
    };

    _this.state = {
      code: null
    };
    return _this;
  }

  createClass(Captcha, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.CreateCaptcha();
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        null,
        React.createElement('div', { id: 'myCanvas' }),
        React.createElement('div', { id: 'error' }),
        React.createElement('input', { type: 'text', name: 'captcha', className: this.props.ClassName, onChange: this.handleChange }),
        React.createElement(
          'div',
          null,
          React.createElement(
            'button',
            { onClick: this.ValidateCaptcha },
            'Click'
          )
        )
      );
    }
  }]);
  return Captcha;
}(Component);

export default Captcha;
//# sourceMappingURL=index.es.js.map
